{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":65711,"databundleVersionId":7405009,"sourceType":"competition"}],"dockerImageVersionId":30761,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-07T12:35:39.041429Z","iopub.execute_input":"2024-09-07T12:35:39.041865Z","iopub.status.idle":"2024-09-07T12:35:39.052450Z","shell.execute_reply.started":"2024-09-07T12:35:39.041824Z","shell.execute_reply":"2024-09-07T12:35:39.050562Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# ***1. Load the Data***","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/playground-series-s4e1/train.csv')\ndf1 = pd.read_csv('/kaggle/input/playground-series-s4e1/test.csv')\ndf1","metadata":{"execution":{"iopub.status.busy":"2024-09-07T12:35:39.080886Z","iopub.execute_input":"2024-09-07T12:35:39.082894Z","iopub.status.idle":"2024-09-07T12:35:39.653519Z","shell.execute_reply.started":"2024-09-07T12:35:39.082820Z","shell.execute_reply":"2024-09-07T12:35:39.652316Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, OrdinalEncoder\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, QuantileTransformer\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import KNNImputer, SimpleImputer, IterativeImputer\nfrom sklearn.linear_model import BayesianRidge \nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV, KFold\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report, precision_score, recall_score","metadata":{"execution":{"iopub.status.busy":"2024-09-07T12:35:39.656143Z","iopub.execute_input":"2024-09-07T12:35:39.656675Z","iopub.status.idle":"2024-09-07T12:35:39.667531Z","shell.execute_reply.started":"2024-09-07T12:35:39.656631Z","shell.execute_reply":"2024-09-07T12:35:39.666108Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **2. Analyse the Data**","metadata":{}},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-07T12:35:39.668988Z","iopub.execute_input":"2024-09-07T12:35:39.669787Z","iopub.status.idle":"2024-09-07T12:35:39.747993Z","shell.execute_reply.started":"2024-09-07T12:35:39.669738Z","shell.execute_reply":"2024-09-07T12:35:39.746777Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig, ax = plt.subplots(figsize=(6,4))\ndf.CreditScore.plot(kind='hist', ax=ax)","metadata":{"execution":{"iopub.status.busy":"2024-09-07T13:15:33.412032Z","iopub.execute_input":"2024-09-07T13:15:33.412501Z","iopub.status.idle":"2024-09-07T13:15:33.759298Z","shell.execute_reply.started":"2024-09-07T13:15:33.412458Z","shell.execute_reply":"2024-09-07T13:15:33.757983Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **3. Data Cleaning**","metadata":{}},{"cell_type":"code","source":"X = df.drop(['id','CustomerId','Surname','Exited'], axis=1)\nid = df1.id\ndf1 = df1.drop(['id','CustomerId','Surname'], axis=1)\ny = df[['Exited']]\n","metadata":{"execution":{"iopub.status.busy":"2024-09-07T12:35:40.101606Z","iopub.execute_input":"2024-09-07T12:35:40.102032Z","iopub.status.idle":"2024-09-07T12:35:40.121566Z","shell.execute_reply.started":"2024-09-07T12:35:40.101987Z","shell.execute_reply":"2024-09-07T12:35:40.119667Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\ncat_col = ['Gender','Geography', 'HasCrCard', 'IsActiveMember']\nnum_col = ['CreditScore', 'Age', 'Tenure', 'Balance', 'NumOfProducts', 'EstimatedSalary']","metadata":{"execution":{"iopub.status.busy":"2024-09-07T12:35:40.123328Z","iopub.execute_input":"2024-09-07T12:35:40.123721Z","iopub.status.idle":"2024-09-07T12:35:40.174435Z","shell.execute_reply.started":"2024-09-07T12:35:40.123679Z","shell.execute_reply":"2024-09-07T12:35:40.173096Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"min_max = MinMaxScaler()\none_hot = OneHotEncoder()\npreprocessing = ColumnTransformer([('num', min_max, num_col), ('cat', one_hot, cat_col)])","metadata":{"execution":{"iopub.status.busy":"2024-09-07T12:35:40.175957Z","iopub.execute_input":"2024-09-07T12:35:40.176401Z","iopub.status.idle":"2024-09-07T12:35:40.183107Z","shell.execute_reply.started":"2024-09-07T12:35:40.176352Z","shell.execute_reply":"2024-09-07T12:35:40.181819Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train = preprocessing.fit_transform(X_train)\nX_test = preprocessing.fit_transform(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-09-07T12:35:40.184875Z","iopub.execute_input":"2024-09-07T12:35:40.185294Z","iopub.status.idle":"2024-09-07T12:35:40.399101Z","shell.execute_reply.started":"2024-09-07T12:35:40.185243Z","shell.execute_reply":"2024-09-07T12:35:40.397814Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **4. Fit the Model**","metadata":{}},{"cell_type":"code","source":"for model in [RandomForestClassifier, XGBClassifier, GradientBoostingClassifier]:\n    cls = model()\n    kfold = KFold(n_splits=10, shuffle=True, random_state=42)\n    s = cross_val_score(cls, X_train, y_train, scoring='roc_auc', cv=kfold, verbose=0)\n    print(\n        f\"{model.__name__:22}  AUC: \"\n        f\"{s.mean():.3f} STD: {s.std():.2f}\"\n    )","metadata":{"execution":{"iopub.status.busy":"2024-09-07T12:35:40.401331Z","iopub.execute_input":"2024-09-07T12:35:40.401971Z","iopub.status.idle":"2024-09-07T12:43:31.211986Z","shell.execute_reply.started":"2024-09-07T12:35:40.401900Z","shell.execute_reply":"2024-09-07T12:43:31.210541Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"gb = GradientBoostingClassifier()\ngb.fit(X_train, y_train)\ny_predict = gb.predict(X_test)\nprob = gb.predict_proba(X_test)\naccuracy = accuracy_score(y_test, y_predict)\naccuracy","metadata":{"execution":{"iopub.status.busy":"2024-09-07T12:43:31.213683Z","iopub.execute_input":"2024-09-07T12:43:31.214113Z","iopub.status.idle":"2024-09-07T12:43:57.240567Z","shell.execute_reply.started":"2024-09-07T12:43:31.214070Z","shell.execute_reply":"2024-09-07T12:43:57.239183Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import roc_auc_score\nroc_auc_score(y_test, prob[:, 1])","metadata":{"execution":{"iopub.status.busy":"2024-09-07T12:43:57.242307Z","iopub.execute_input":"2024-09-07T12:43:57.243062Z","iopub.status.idle":"2024-09-07T12:43:57.272203Z","shell.execute_reply.started":"2024-09-07T12:43:57.243003Z","shell.execute_reply":"2024-09-07T12:43:57.270751Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from yellowbrick.classifier import ROCAUC\nfig, ax =plt.subplots(figsize=(6,6))\nroc_viz = ROCAUC(gb)\nroc_viz.fit(X_train, y_train)\nroc_viz.score(X_test, y_test)\nroc_viz.poof()","metadata":{"execution":{"iopub.status.busy":"2024-09-07T12:43:57.274935Z","iopub.execute_input":"2024-09-07T12:43:57.275606Z","iopub.status.idle":"2024-09-07T12:43:57.876236Z","shell.execute_reply.started":"2024-09-07T12:43:57.275534Z","shell.execute_reply":"2024-09-07T12:43:57.874982Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_final = preprocessing.transform(df1)\ny_pred_final= gb.predict_proba(y_final)[:,1]\nprediction = pd.DataFrame({\"id\": id,\"Exited\": y_pred_final})\nprediction","metadata":{"execution":{"iopub.status.busy":"2024-09-07T12:43:57.878354Z","iopub.execute_input":"2024-09-07T12:43:57.878823Z","iopub.status.idle":"2024-09-07T12:43:58.260628Z","shell.execute_reply.started":"2024-09-07T12:43:57.878771Z","shell.execute_reply":"2024-09-07T12:43:58.259264Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prediction.to_csv('submission.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-09-07T12:43:58.265452Z","iopub.execute_input":"2024-09-07T12:43:58.265874Z","iopub.status.idle":"2024-09-07T12:43:58.650795Z","shell.execute_reply.started":"2024-09-07T12:43:58.265833Z","shell.execute_reply":"2024-09-07T12:43:58.649325Z"},"trusted":true},"execution_count":null,"outputs":[]}]}